/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx_hal.h"
#include "adc.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

uint8_t data_on[] = {0xFE, 0x41};
uint8_t data_clear[] = {0xFE, 0x51};
uint8_t data_home[] = {0xFE, 0x46};
uint8_t data_delete[] = {0xFE, 0x4E};
uint8_t data_set_cursor_valor[] = {0xFE, 0x45, 0x0D};
uint8_t data_set_cursor_grau[] = {0xFE, 0x45, 0x12};
uint8_t data_set_cursor_menu[] = {0xFE, 0x45, 0x14};
uint8_t data_set_cursor_modo_start[] = {0xFE, 0x45, 0x54};
uint8_t data_set_cursor_modo_end[] = {0xFE, 0x45, 0x64};
uint8_t data_set_cursor_temperatura[] = {0xFE, 0x45, 0x40};
uint8_t data_grau[] = {0xDF, 'C'};

int temperatura;
int modo;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
int isKeyPressed(){
	HAL_GPIO_WritePin(GPIOE, coluna1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, coluna2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, coluna3_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, coluna4_Pin, GPIO_PIN_SET);


	if(HAL_GPIO_ReadPin(GPIOE, linha1_Pin) == GPIO_PIN_SET){
		return 1;
	}
	else if(HAL_GPIO_ReadPin(GPIOE, linha2_Pin) == GPIO_PIN_SET){
		return 2;
	}
	else if(HAL_GPIO_ReadPin(GPIOE, linha3_Pin) == GPIO_PIN_SET){
		return 3;
	}
	else if(HAL_GPIO_ReadPin(GPIOE, linha4_Pin) == GPIO_PIN_SET){
		return 4;
	} else{
		return 0;
	}
}

char checkKey(int linha){
	HAL_GPIO_WritePin(GPIOE, coluna1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOE, coluna2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOE, coluna3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOE, coluna4_Pin, GPIO_PIN_RESET);

	switch(linha){
		case 1:
			HAL_GPIO_WritePin(GPIOE, coluna1_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha1_Pin) == GPIO_PIN_SET){
				return '1';
			}
			HAL_GPIO_WritePin(GPIOE, coluna1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna2_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha1_Pin) == GPIO_PIN_SET){
				return '2';
			}
			HAL_GPIO_WritePin(GPIOE, coluna2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna3_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha1_Pin) == GPIO_PIN_SET){
				return '3';
			}
			HAL_GPIO_WritePin(GPIOE, coluna3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna4_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha1_Pin) == GPIO_PIN_SET){
				return 'A';
			}
		case 2:
			HAL_GPIO_WritePin(GPIOE, coluna1_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha2_Pin) == GPIO_PIN_SET){
				return '4';
			}
			HAL_GPIO_WritePin(GPIOE, coluna1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna2_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha2_Pin) == GPIO_PIN_SET){
				return '5';
			}
			HAL_GPIO_WritePin(GPIOE, coluna2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna3_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha2_Pin) == GPIO_PIN_SET){
				return '6';
			}
			HAL_GPIO_WritePin(GPIOE, coluna3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna4_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha2_Pin) == GPIO_PIN_SET){
				return 'B';
			}
		case 3:
			HAL_GPIO_WritePin(GPIOE, coluna1_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha3_Pin) == GPIO_PIN_SET){
				return '7';
			}
			HAL_GPIO_WritePin(GPIOE, coluna1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna2_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha3_Pin) == GPIO_PIN_SET){
				return '8';
			}
			HAL_GPIO_WritePin(GPIOE, coluna2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna3_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha3_Pin) == GPIO_PIN_SET){
				return '9';
			}
			HAL_GPIO_WritePin(GPIOE, coluna3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna4_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha3_Pin) == GPIO_PIN_SET){
				return 'C';
			}
		case 4:
			HAL_GPIO_WritePin(GPIOE, coluna1_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha4_Pin) == GPIO_PIN_SET){
				return '*';
			}
			HAL_GPIO_WritePin(GPIOE, coluna1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna2_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha4_Pin) == GPIO_PIN_SET){
				return '0';
			}
			HAL_GPIO_WritePin(GPIOE, coluna2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna3_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha4_Pin) == GPIO_PIN_SET){
				return '#';
			}
			HAL_GPIO_WritePin(GPIOE, coluna3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, coluna4_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(GPIOE, linha4_Pin) == GPIO_PIN_SET){
				return 'D';
			}
	}
}

void menuConfig(){

	char data_menu1[] = "Digite temperatura:";
	char data_menu2[] = "B: Trocar o modo";
	char data_quente[] = "Superaquecimento";
	char data_frio[] = "Resfriamento";
	int done = 1;
	int i = 0;
	int j = 0;
	char temp[5] = {'0', '0', '0', '0', '0'};

	HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_clear, 2, 1000);

	HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_menu1, strlen(data_menu1), 1000);
	HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_set_cursor_menu, 3, 1000);
	HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_menu2, strlen(data_menu2), 1000);
	HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_set_cursor_modo_start,3, 1000);

	if(modo){
		HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_quente, strlen(data_quente), 1000);
	} else {
		HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_frio, strlen(data_frio), 1000);
	}

	HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_set_cursor_temperatura, 3, 1000);


	while(done){
		if(checkKey(isKeyPressed()) == 'B'){
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_set_cursor_modo_end,3, 1000);
			while(j<5){
				HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_delete, 2, 1000);
				j++;
			}
			j = 0;
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_set_cursor_modo_start,3, 1000);
			if(modo){
				modo = 0;
				HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_frio, strlen(data_frio), 1000);
			} else {
				modo = 1;
				HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_quente, strlen(data_quente), 1000);
			}
		} else if (checkKey(isKeyPressed()) == '#'){
			temperatura = atoi(temp);
			done = 0;
			HAL_Delay(1000);
		} else{
			uint8_t data_set_cursor_templocal[] = {0xFE, 0x45, (0x40 + i)};
			temp[i] = checkKey(isKeyPressed());
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_set_cursor_templocal, 3, 1000);
			HAL_I2C_Master_Transmit(&hi2c1, 0x50, temp[i], 1, 1000);
			i++;
		}
	}
}
/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */
	uint32_t adcValue = 0;

	char data_temperatura[] = "Temperatura: ";


  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_TIM13_Init();
  MX_USART1_UART_Init();
  MX_TIM1_Init();
  MX_I2C1_Init();

  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);

  HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_on, 2, 1000);
  HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_clear, 2, 1000);
  HAL_Delay(10);
  HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_temperatura, strlen(data_temperatura), 1000);
  HAL_Delay(10);
  HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_set_cursor_grau, 3, 1000);

  HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_grau, 2, 1000);

  HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_set_cursor_menu, 3, 1000);
  char menu[] = "A: Configurar Alarme";
  HAL_I2C_Master_Transmit(&hi2c1, 0x50, menu, strlen(menu), 1000);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  char valor[5] = {'0', '0', '0', '0', '0'};
	  HAL_ADC_Start(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, 100);
	  adcValue = HAL_ADC_GetValue(&hadc1);
	  HAL_ADC_Stop(&hadc1);
	  float temp = 0.056166*adcValue - 55;
	  sprintf(valor, "%.3f", temp);
	  valor[4] = ' ';
	  HAL_UART_Transmit(&huart1, valor, 5, 1000);


	  HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_set_cursor_valor, 3, 1000);

	  HAL_I2C_Master_Transmit(&hi2c1, 0x50, valor, 5, 1000);
	  HAL_Delay(1000);

	  temperatura = 40;
	  modo = 1;

	  if(modo){
		  if(temp > temperatura){
		  		  HAL_TIM_Base_Start_IT(&htim13);
		  	  } else{
		  		  HAL_TIM_Base_Stop_IT(&htim13);
		  	  }
	  } else {
		  if(temp < temperatura){
		  		  HAL_TIM_Base_Start_IT(&htim13);

		  	  } else{
		  		  HAL_TIM_Base_Stop_IT(&htim13);
		  	  }
	  }

	  if (checkKey(isKeyPressed()) == 'A'){

		  HAL_I2C_Master_Transmit(&hi2c1, 0x50, data_clear, 2, 1000);
	  }



  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if(htim == &htim13){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
